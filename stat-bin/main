package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
)

func main() {
	
	file, err := os.Open("data.txt")
	if err != nil {
		fmt.Println("Error opening file:", err)
		return
	}
	defer file.Close()

	
	sc := bufio.NewScanner(file)
	nms := make([]int, 0) 

	
	for sc.Scan() {
		
		nm, err := strconv.Atoi(sc.Text())
		if err != nil {
			fmt.Println("Invalid number in file, skipping:", sc.Text())
			continue 
		}
		nms = append(nms, float64(nm)) 
	}

	if err := sc.Err(); err != nil {
		fmt.Println("Error reading file:", err)
		return
	}
	cc := Average(nms)
	fmt.Printf("Median: %2f\n", cc)

	vv := Median(nms)
    fmt.Printf("Median: %2f\n", vv)

	ve := Variance(nms)
	fmt.Printf("Median: %2f\n", ve)
}




func Average(nms []float64) float64 {
	if len(nms) == 0 {
		fmt.Println("No numbers to calculate average.")
		return 0
	}

	sum := 0
	for _, num := range nms {
		sum += num
	}

	average := sum / float64(len(nms))


	return average
}



func Median(nms []int) float64{

	if len(nms) == 0 {
		fmt.Println("No numbers to calculate average.")
		return 0
	}

	md := len(nms)/2

	if md % 2 == 0 {
		mdd := nms[md] + nms[md]+1
		nmm := float64(mdd)
		return nmm
		
	} else {
		nmm := float64(nms[md])
		
		return nmm
	}

}


func Variance(nms []int)  float64 {

	if len(nms) == 0 {
		fmt.Println("No numbers to calculate average.")
		return 0
	}
	
	md := Median(nms)

	a , b , c := md - float64(nms[len(nms)-1]) , md - md , md - float64(nms[0])
	
	e,f,g := a*a, b*b, c*c

	ve := ( e + f + g ) / float64(len(nms))
	return ve
}