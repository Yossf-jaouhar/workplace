package main

import (
	"fmt"
	"net"
)

// handleConnection processes the client connection with a specified timeout.
func handleConnection(conn net.Conn) {
	defer conn.Close()

	// Create a Context with a timeout of 5 seconds
	// ctx := context.Background()

	buffer := make([]byte, 1024)

	// Start a long-running operation based on Context
	done := make(chan bool)
	go func() {
		// Read data from the client
		n, err := conn.Read(buffer)
		if err != nil {
			fmt.Println("Error reading:", err)
			done <- false
			return
		}

		fmt.Println("Received message:", string(buffer[:n]))
	
	}()
}

func main() {
	// Create a TCP listener on port 8080
	listener, err := net.Listen("tcp", ":8080")
	if err != nil {
		fmt.Println("Error creating listener:", err)
		return
	}
	defer listener.Close()

	fmt.Println("Listening on port 8080...")

	for {
		// Accept connection from the client
		conn, err := listener.Accept()
		if err != nil {
			fmt.Println("Error accepting connection:", err)
			continue
		}

		// Handle the connection using Context
		go handleConnection(conn)
	}
}
