package main

import (
	"fmt"
	"net"
	"os"
)

// myListen creates a custom TCP listener similar to net.Listen.
func myListen(protocol, address string) (net.Listener, error) {
	// Create a TCP address from the provided protocol and address
	tcpAddr, err := net.ResolveTCPAddr(protocol, address)
	if err != nil {
		return nil, fmt.Errorf("error resolving address: %v", err)
	}

	// Create the listener on the specified address
	listener, err := net.ListenTCP(protocol, tcpAddr)
	if err != nil {
		return nil, fmt.Errorf("error creating listener: %v", err)
	}

	return listener, nil
}

// handleConnection is a simple function that reads and prints data from a connection.
func handleConnection(conn net.Conn) {
	defer conn.Close() // Ensure connection closes when done
	buffer := make([]byte, 1024)

	// Read data sent from the client
	n, err := conn.Read(buffer)
	if err != nil {
		fmt.Println("Error reading:", err)
		return
	}

	fmt.Println("Received message:", string(buffer[:n]))
	conn.Write([]byte("Message received"))
}

func main() {
	// Use myListen to create a listener on TCP port 8080
	listener, err := myListen("tcp", "localhost:8080")
	if err != nil {
		fmt.Println("Failed to create listener:", err)
		os.Exit(1)
	}
	defer listener.Close()

	fmt.Println("Listening on port 8080...")

	// Accept connections in a loop
	for {
		conn, err := listener.Accept() // Accept an incoming connection
		if err != nil {
			fmt.Println("Error accepting connection:", err)
			continue
		}
		hh :=  conn.RemoteAddr().String()


		fmt.Println(hh)

		// Handle each connection in a separate goroutine
		go handleConnection(conn)
	}
}
